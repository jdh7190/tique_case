{"version":3,"file":"centrifuge.min.js","mappings":"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","sources":["webpack://Centrifuge/webpack/universalModuleDefinition","webpack://Centrifuge/./src/centrifuge.js","webpack://Centrifuge/./src/index.js","webpack://Centrifuge/./src/json.js","webpack://Centrifuge/./src/subscription.js","webpack://Centrifuge/./src/utils.js","webpack://Centrifuge/./node_modules/events/events.js","webpack://Centrifuge/webpack/bootstrap","webpack://Centrifuge/webpack/runtime/global","webpack://Centrifuge/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(this, function() {\nreturn ","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff,\n  extend\n} from './utils';\n\nconst _errorTimeout = 'timeout';\nconst _errorConnectionClosed = 'connection closed';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._websocket = null;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._xmlhttprequest = null;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._serverSubs = {};\n    this._lastSeq = {};\n    this._lastGen = {};\n    this._lastOffset = {};\n    this._lastEpoch = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingTimeout = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._xhrID = 0;\n    this._xhrs = {};\n    this._dispatchPromise = Promise.resolve();\n    this._protocol = '';\n    this._config = {\n      protocol: '',\n      debug: false,\n      name: 'js',\n      version: '',\n      websocket: null,\n      sockjs: null,\n      xmlhttprequest: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTimeout: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null,\n      disableWithCredentials: false\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  setRefreshHeaders(headers) {\n    this._config.refreshHeaders = headers;\n  }\n  setRefreshParams(params) {\n    this._config.refreshParams = params;\n  }\n  setRefreshData(data) {\n    this._config.refreshData = data;\n  }\n\n  setSubscribeHeaders(headers) {\n    this._config.subscribeHeaders = headers;\n  }\n  setSubscribeParams(params) {\n    this._config.subscribeParams = params;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    let xhr;\n    if (this._xmlhttprequest !== null) {\n      // use explicitly passed XMLHttpRequest object.\n      xhr = new this._xmlhttprequest();\n    } else {\n      xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n    }\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !this._config.disableWithCredentials;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    if (this._config.websocket !== null) {\n      return true;\n    }\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    extend(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    const isProtobufURL = startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1;\n    if (isProtobufURL || this._config.protocol === 'protobuf') {\n      this._setFormat('protobuf');\n      this._protocol = 'protobuf';\n    } else {\n      if (this._config.protocol !== '' && this._config.protocol !== 'json') {\n        throw new Error('unsupported protocol ' + this._config.protocol);\n      }\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n\n    this._xmlhttprequest = this._config.xmlhttprequest;\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _abortInflightXHRs() {\n    for (const xhrID in this._xhrs) {\n      try {\n        this._xhrs[xhrID].abort();\n      } catch (e) {\n        this._debug('error aborting xhr', e);\n      }\n      delete this._xhrs[xhrID];\n    }\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n    this._stopPing();\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback({ error: this._createErrorObject('disconnected') });\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._recover = true;\n          }\n          if (sub._shouldResubscribe()) {\n            sub._setSubscribing();\n          }\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    this._abortInflightXHRs();\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _isTransportOpen() {\n    if (this._isSockjs) {\n      return this._transport &&\n        this._transport.transport &&\n        this._transport.transport.readyState === this._transport.transport.OPEN;\n    }\n    return this._transport && this._transport.readyState === this._transport.OPEN;\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return true;\n    }\n\n    if (!this._isTransportOpen()) {\n      // resolve pending commands with error if transport is not open\n      for (let command in commands) {\n        let id = command.id;\n        if (!(id in this._callbacks)) {\n          continue;\n        }\n        const callbacks = this._callbacks[id];\n        clearTimeout(this._callbacks[id].timeout);\n        delete this._callbacks[id];\n        const errback = callbacks.errback;\n        errback({ error: this._createErrorObject(_errorConnectionClosed, 0) });\n      }\n      return false;\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n    return true;\n  }\n\n  _getSubProtocol() {\n    if (!this._protocol) {\n      return '';\n    }\n    return 'centrifuge-' + this._protocol;\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      if (this._config.sockjsTimeout !== null) {\n        sockjsOptions.timeout = this._config.sockjsTimeout;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      if (this._config.websocket !== null) {\n        this._websocket = this._config.websocket;\n      } else {\n        this._websocket = WebSocket;\n      }\n      const subProtocol = this._getSubProtocol();\n      if (subProtocol !== '') {\n        this._transport = new this._websocket(this._url, subProtocol);\n      } else {\n        this._transport = new this._websocket(this._url);\n      }\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData || this._config.name || this._config.version) {\n        msg.params = {};\n      }\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n      if (this._config.name) {\n        msg.params.name = this._config.name;\n      }\n      if (this._config.version) {\n        msg.params.version = this._config.version;\n      }\n\n      let subs = {};\n      let hasSubs = false;\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel) && this._serverSubs[channel].recoverable) {\n          hasSubs = true;\n          let sub = {\n            'recover': true\n          };\n          if (this._serverSubs[channel].seq || this._serverSubs[channel].gen) {\n            if (this._serverSubs[channel].seq) {\n              sub['seq'] = this._serverSubs[channel].seq;\n            }\n            if (this._serverSubs[channel].gen) {\n              sub['gen'] = this._serverSubs[channel].gen;\n            }\n          } else {\n            if (this._serverSubs[channel].offset) {\n              sub['offset'] = this._serverSubs[channel].offset;\n            }\n          }\n          if (this._serverSubs[channel].epoch) {\n            sub['epoch'] = this._serverSubs[channel].epoch;\n          }\n          subs[channel] = sub;\n        }\n      }\n      if (hasSubs) {\n        if (!msg.params) { msg.params = {}; }\n        msg.params.subs = subs;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(resolveCtx => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, resolveCtx.result), hasSubs);\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        const err = rejectCtx.error;\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = _errorConnectionClosed;\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._dataReceived(event.data);\n    };\n  };\n\n  rpc(data) {\n    return this._rpc('', data);\n  }\n\n  namedRPC(method, data) {\n    return this._rpc(method, data);\n  }\n\n  _rpc(method, data) {\n    let params = {\n      data: data\n    };\n    if (method !== '') {\n      params.method = method;\n    };\n    const msg = {\n      method: this._methodType.RPC,\n      params: params\n    };\n    return this._methodCall(msg, function (result) {\n      return result;\n    });\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    const sent = this._transportSend([msg]); // can send async message to server without id set\n    if (!sent) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    };\n    return Promise.resolve({});\n  }\n\n  _getHistoryParams(channel, options) {\n    let params = {\n      channel: channel\n    };\n    if (options !== undefined) {\n      if (options.since) {\n        params['since'] = {\n          'offset': options.since.offset\n        };\n        if (options.since.epoch) {\n          params['since']['epoch'] = options.since.epoch;\n        }\n      };\n      if (options.limit !== undefined) {\n        params['limit'] = options.limit;\n      }\n      if (options.reverse === true) {\n        params['reverse'] = true;\n      }\n    };\n    return params;\n  }\n\n  _methodCall(msg, resultCB) {\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n    return new Promise((resolve, reject) => {\n      this._call(msg).then(resolveCtx => {\n        resolve(resultCB(this._decoder.decodeCommandResult(msg.method, resolveCtx.result)));\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        reject(rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    });\n  }\n\n  publish(channel, data) {\n    const msg = {\n      method: this._methodType.PUBLISH,\n      params: {\n        channel: channel,\n        data: data\n      }\n    };\n    return this._methodCall(msg, function () {\n      return {};\n    });\n  }\n\n  history(channel, options) {\n    const params = this._getHistoryParams(channel, options);\n    const msg = {\n      method: this._methodType.HISTORY,\n      params: params\n    };\n    return this._methodCall(msg, function (result) {\n      return {\n        'publications': result.publications,\n        'epoch': result.epoch || '',\n        'offset': result.offset || 0\n      };\n    });\n  }\n\n  presence(channel) {\n    const msg = {\n      method: this._methodType.PRESENCE,\n      params: {\n        channel: channel\n      }\n    };\n    return this._methodCall(msg, function (result) {\n      return {\n        'presence': result.presence\n      };\n    });\n  }\n\n  presenceStats(channel) {\n    const msg = {\n      method: this._methodType.PRESENCE_STATS,\n      params: {\n        channel: channel\n      }\n    };\n    return this._methodCall(msg, function (result) {\n      return {\n        'num_users': result.num_users,\n        'num_clients': result.num_clients\n      };\n    });\n  }\n\n  _dataReceived(data) {\n    const replies = this._decoder.decodeReplies(data);\n    // we have to guarantee order of events in replies processing - i.e. start processing\n    // next reply only when we finished processing of current one. Without syncing things in\n    // this way we could get wrong publication events order as reply promises resolve\n    // on next loop tick so for loop continues before we finished emitting all reply events.\n    this._dispatchPromise = this._dispatchPromise.then(() => {\n      let finishDispatch;\n      this._dispatchPromise = new Promise(resolve => {\n        finishDispatch = resolve;\n      });\n      this._dispatchSynchronized(replies, finishDispatch);\n    });\n    this._restartPing();\n  }\n\n  _dispatchSynchronized(replies, finishDispatch) {\n    let p = Promise.resolve();\n    for (const i in replies) {\n      if (replies.hasOwnProperty(i)) {\n        p = p.then(() => {\n          return this._dispatchReply(replies[i]);\n        });\n      }\n    }\n    p = p.then(() => {\n      finishDispatch();\n    });\n  }\n\n  _dispatchReply(reply) {\n    var next;\n    const p = new Promise(resolve => {\n      next = resolve;\n    });\n\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      next();\n      return p;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply, next);\n    } else {\n      this._handlePush(reply.result, next);\n    }\n\n    return p;\n  };\n\n  _call(msg) {\n    return new Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    const reconnect = shouldReconnect || false;\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    if (this._isDisconnected()) {\n      if (!reconnect) {\n        this._clearConnectedState(reconnect);\n      }\n      return;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    this._debug('disconnected:', reason, shouldReconnect);\n    this._setStatus('disconnected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (this._reconnecting === false) {\n      // fire unsubscribe events for server side subs.\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel)) {\n          this.emit('unsubscribe', { channel: channel });\n        }\n      }\n      this.emit('disconnect', {\n        reason: reason,\n        reconnect: reconnect\n      });\n    }\n\n    if (reconnect === false) {\n      this._subs = {};\n      this._serverSubs = {};\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(resolveCtx => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, rejectCtx => {\n          this._refreshError(rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n  };\n\n  _newXHRID() {\n    this._xhrID++;\n    return this._xhrID;\n  }\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (resp.error || resp.status !== 200 || this._clientID !== clientID) {\n        return;\n      }\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subRefreshResponse(\n          channel,\n          this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subRefreshError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    if (sub._subscribeData) {\n      msg.params.data = sub._subscribeData;\n    }\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const seq = this._getLastSeq(channel);\n        const gen = this._getLastGen(channel);\n        if (seq || gen) {\n          if (seq) {\n            msg.params.seq = seq;\n          }\n          if (gen) {\n            msg.params.gen = gen;\n          }\n        } else {\n          const offset = this._getLastOffset(channel);\n          if (offset) {\n            msg.params.offset = offset;\n          }\n        }\n        const epoch = this._getLastEpoch(channel);\n        if (epoch) {\n          msg.params.epoch = epoch;\n        }\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subscribeResponse(\n          channel,\n          recover,\n          this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subscribeError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    delete this._subs[sub.channel];\n    delete this._lastOffset[sub.channel];\n    delete this._lastSeq[sub.channel];\n    delete this._lastGen[sub.channel];\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  _getTTLMilliseconds(ttl) {\n    // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n    return Math.min(ttl * 1000, 2147483647);\n  }\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _isServerSub(channel) {\n    return this._serverSubs[channel] !== undefined;\n  };\n\n  _connectResponse(result, isRecover) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n    this._refreshRequired = false;\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._startPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n\n    if (result.subs) {\n      this._processServerSubs(result.subs);\n    }\n  };\n\n  _processServerSubs(subs) {\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        const isResubscribe = this._serverSubs[channel] !== undefined;\n        let subCtx = { channel: channel, isResubscribe: isResubscribe };\n        subCtx = this._expandSubscribeContext(subCtx, sub);\n        this.emit('subscribe', subCtx);\n      }\n    }\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        if (sub.recovered) {\n          let pubs = sub.publications;\n          if (pubs && pubs.length > 0) {\n\n            // handle legacy order.\n            // TODO: remove as soon as Centrifuge v1 released.\n            if (pubs.length > 1 && (!pubs[0].offset || pubs[0].offset > pubs[1].offset)) {\n              pubs = pubs.reverse();\n            }\n\n            for (let i in pubs) {\n              if (pubs.hasOwnProperty(i)) {\n                this._handlePublication(channel, pubs[i]);\n              }\n            }\n          }\n        }\n        this._serverSubs[channel] = {\n          'seq': sub.seq,\n          'gen': sub.gen,\n          'offset': sub.offset,\n          'epoch': sub.epoch,\n          'recoverable': sub.recoverable\n        };\n      }\n    }\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingTimeout !== null) {\n      clearTimeout(this._pingTimeout);\n      this._pingTimeout = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingTimeout = setTimeout(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _expandSubscribeContext(ctx, result) {\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    ctx.recovered = recovered;\n\n    let positioned = false;\n    if ('positioned' in result) {\n      positioned = result.positioned;\n    }\n    let epoch = '';\n    if ('epoch' in result) {\n      epoch = result.epoch;\n    }\n    let offset = 0;\n    if ('offset' in result) {\n      offset = result.offset;\n    }\n    if (positioned) {\n      ctx.streamPosition = {\n        'offset': offset,\n        'epoch': epoch\n      };\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n    return ctx;\n  }\n\n  _subscribeResponse(channel, isRecover, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    sub._setSubscribeSuccess(result);\n\n    let pubs = result.publications;\n    if (pubs && pubs.length > 0) {\n      if (pubs.length >= 2 && !pubs[0].offset && !pubs[1].offset) {\n        // handle legacy order.\n        pubs = pubs.reverse();\n      }\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    }\n\n    if (result.recoverable && (!isRecover || !result.recovered)) {\n      this._lastSeq[channel] = result.seq || 0;\n      this._lastGen[channel] = result.gen || 0;\n      this._lastOffset[channel] = result.offset || 0;\n    }\n\n    this._lastEpoch[channel] = result.epoch || '';\n\n    if (result.recoverable) {\n      sub._recoverable = true;\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply, next) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      next();\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback({ result, next });\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        next();\n        return;\n      }\n      const error = reply.error;\n      errback({ error, next });\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const ctx = { 'info': join.info };\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('join', ctx);\n      }\n      return;\n    }\n    sub.emit('join', ctx);\n  };\n\n  _handleLeave(channel, leave) {\n    const ctx = { 'info': leave.info };\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('leave', ctx);\n      }\n      return;\n    }\n    sub.emit('leave', ctx);\n  };\n\n  _handleUnsub(channel, unsub) {\n    const ctx = {};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        delete this._serverSubs[channel];\n        ctx.channel = channel;\n        this.emit('unsubscribe', ctx);\n      }\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handleSub(channel, sub) {\n    this._serverSubs[channel] = {\n      'seq': sub.seq,\n      'gen': sub.gen,\n      'offset': sub.offset,\n      'epoch': sub.epoch,\n      'recoverable': sub.recoverable\n    };\n    let ctx = { 'channel': channel, isResubscribe: false };\n    ctx = this._expandSubscribeContext(ctx, sub);\n    this.emit('subscribe', ctx);\n  };\n\n  _handlePublication(channel, pub) {\n    const sub = this._getSub(channel);\n    const ctx = {\n      'data': pub.data,\n      'seq': pub.seq,\n      'gen': pub.gen,\n      'offset': pub.offset\n    };\n    if (pub.info) {\n      ctx.info = pub.info;\n    }\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        if (pub.seq !== undefined) {\n          this._serverSubs[channel].seq = pub.seq;\n        }\n        if (pub.gen !== undefined) {\n          this._serverSubs[channel].gen = pub.gen;\n        }\n        if (pub.offset !== undefined) {\n          this._serverSubs[channel].offset = pub.offset;\n        }\n        ctx.channel = channel;\n        this.emit('publish', ctx);\n      }\n      return;\n    }\n    if (pub.seq !== undefined) {\n      this._lastSeq[channel] = pub.seq;\n    }\n    if (pub.gen !== undefined) {\n      this._lastGen[channel] = pub.gen;\n    }\n    if (pub.offset !== undefined) {\n      this._lastOffset[channel] = pub.offset;\n    }\n    sub.emit('publish', ctx);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data, next) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUBSCRIBE) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUBSCRIBE, push.data);\n      this._handleUnsub(channel, unsub);\n    } else if (type === this._pushType.SUBSCRIBE) {\n      const sub = this._decoder.decodePushData(this._pushType.UNSUBSCRIBE, push.data);\n      this._handleSub(channel, sub);\n    }\n    next();\n  }\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    const msg = {\n      method: this._methodType.PING\n    };\n    this._call(msg).then(resolveCtx => {\n      this._pingResponse(this._decoder.decodeCommandResult(this._methodType.PING, resolveCtx.result));\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      this._debug('ping error', rejectCtx.error);\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n    });\n  };\n\n  _pingResponse(result) {\n    if (!this.isConnected()) {\n      return;\n    }\n    this._stopPing();\n    this._startPing();\n  }\n\n  _getLastSeq(channel) {\n    const lastSeq = this._lastSeq[channel];\n    if (lastSeq) {\n      return lastSeq;\n    }\n    return 0;\n  };\n\n  _getLastOffset(channel) {\n    const lastOffset = this._lastOffset[channel];\n    if (lastOffset) {\n      return lastOffset;\n    }\n    return 0;\n  };\n\n  _getLastGen(channel) {\n    const lastGen = this._lastGen[channel];\n    if (lastGen) {\n      return lastGen;\n    }\n    return 0;\n  };\n\n  _getLastEpoch(channel) {\n    const lastEpoch = this._lastEpoch[channel];\n    if (lastEpoch) {\n      return lastEpoch;\n    }\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback({ error: this._createErrorObject(_errorTimeout) });\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message) {\n    let id = this._nextMessageId();\n    message.id = id;\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    return id;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const seq = this._getLastSeq(channel);\n              const gen = this._getLastGen(channel);\n              if (seq || gen) {\n                if (seq) {\n                  msg.params.seq = seq;\n                }\n                if (gen) {\n                  msg.params.gen = gen;\n                }\n              } else {\n                const offset = this._getLastOffset(channel);\n                if (offset) {\n                  msg.params.offset = offset;\n                }\n              }\n              const epoch = this._getLastEpoch(channel);\n              if (epoch) {\n                msg.params.epoch = epoch;\n              }\n            }\n            this._call(msg).then(resolveCtx => {\n              this._subscribeResponse(\n                channel,\n                recover,\n                this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n              );\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            }, rejectCtx => {\n              this._subscribeError(channel, rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _setSubscribeSince(sub, since) {\n    this._lastOffset[sub.channel] = since.offset;\n    this._lastEpoch[sub.channel] = since.epoch;\n    sub._setNeedRecover(true);\n  }\n\n  subscribe(channel, events, opts) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe(opts);\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe(opts);\n    return sub;\n  };\n}\n","import { Centrifuge } from './centrifuge.js';\nexport default Centrifuge;\n","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUBSCRIBE: 3,\n  MESSAGE: 4,\n  SUBSCRIBE: 5\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    return commands.map(c => JSON.stringify(c)).join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    return data.split('\\n').filter(r => r !== '').map(r => JSON.parse(r));\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._recoverable = false;\n    this._recover = false;\n    this._setEvents(events);\n    this._initializePromise();\n    this._promises = {};\n    this._promiseId = 0;\n    this._subscribeData = null;\n    this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n  }\n\n  _nextPromiseId() {\n    return ++this._promiseId;\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    }).then(function () { }, function () { });\n  };\n\n  _setNeedRecover(enabled) {\n    this._recoverable = enabled;\n    this._recover = enabled;\n  }\n\n  _needRecover() {\n    return this._recoverable === true && this._recover === true;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(subscribeResult) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(subscribeResult);\n    this._recover = false;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].resolve();\n      delete this._promises[id];\n    }\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n    this.emit('error', errContext);\n    this._reject(errContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].reject(err);\n      delete this._promises[id];\n    }\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._recover = false;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastSeq[this.channel];\n      delete this._centrifuge._lastGen[this.channel];\n      delete this._centrifuge._lastEpoch[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(subscribeResult) {\n    let ctx = {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe\n    };\n    if (subscribeResult) {\n      // subscribeResult not available when called from Subscription.ready method at the moment.\n      ctx = this._centrifuge._expandSubscribeContext(ctx, subscribeResult);\n    }\n    return ctx;\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  _setSubscribeData(data) {\n    this._subscribeData = data;\n  }\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe(opts) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    if (opts && opts.since) {\n      this._centrifuge._setSubscribeSince(this, opts.since);\n    }\n    if (opts && opts.data) {\n      this._setSubscribeData(opts.data);\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall() {\n    if (this._isSuccess()) {\n      return Promise.resolve();\n    } else if (this._isError()) {\n      return Promise.reject(this._error);\n    }\n    let subPromise = new Promise((res, rej) => {\n      const timeout = setTimeout(function () {\n        rej({ 'code': 0, 'message': 'timeout' });\n      }, this._centrifuge._config.timeout);\n      this._promises[this._nextPromiseId()] = {\n        timeout: timeout,\n        resolve: res,\n        reject: rej\n      };\n    });\n    return subPromise;\n  }\n\n  publish(data) {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.publish(self.channel, data);\n    });\n  };\n\n  presence() {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.presence(self.channel);\n    });\n  };\n\n  presenceStats() {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.presenceStats(self.channel);\n    });\n  };\n\n  history(options) {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.history(self.channel, options);\n    });\n  };\n}\n","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\nexport function extend(a, b) {\n  for (const key in b) {\n    if (b.hasOwnProperty(key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(579);\n"],"names":["root","factory","exports","module","define","amd","this","_errorTimeout","_errorConnectionClosed","Centrifuge","url","options","_url","_websocket","_sockjs","_isSockjs","_xmlhttprequest","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_serverSubs","_lastSeq","_lastGen","_lastOffset","_lastEpoch","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingTimeout","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_xhrID","_xhrs","_dispatchPromise","Promise","resolve","_protocol","_config","protocol","debug","name","version","websocket","sockjs","xmlhttprequest","minRetry","maxRetry","timeout","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTimeout","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","disableWithCredentials","_configure","token","data","headers","params","callback","xhr","query","i","_debug","JSON","stringify","global","XMLHttpRequest","ActiveXObject","hasOwnProperty","length","encodeURIComponent","headerName","open","withCredentials","setRequestHeader","onreadystatechange","readyState","status","parsed","parse","responseText","e","error","_log","setTimeout","send","log","arguments","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","extend","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","xhrID","abort","reconnect","id","_stopPing","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_recover","_shouldResubscribe","_setSubscribing","_setUnsubscribed","_abortInflightXHRs","_clearSubRefreshTimeout","transport","OPEN","commands","_isTransportOpen","command","encodeCommands","sockjsOptions","transports","server","_websocketSupported","subProtocol","_getSubProtocol","binaryType","onopen","onheartbeat","_restartPing","msg","subs","hasSubs","recoverable","seq","gen","offset","epoch","Date","_call","then","resolveCtx","_connectResponse","decodeCommandResult","CONNECT","result","next","rejectCtx","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_refresh","_connect","onmessage","_dataReceived","_rpc","method","RPC","_methodCall","SEND","isConnected","_transportSend","reject","undefined","since","limit","reverse","resultCB","PUBLISH","_getHistoryParams","HISTORY","publications","PRESENCE","presence","PRESENCE_STATS","num_users","num_clients","replies","decodeReplies","finishDispatch","_dispatchSynchronized","p","_dispatchReply","reply","_handleReply","_handlePush","_addMessage","_registerCall","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_refreshFailed","clientID","_newXHRID","cb","resp","jitter","Math","round","random","max","REFRESH","_refreshResponse","_refreshError","_ajax","err","expires","client","_getTTLMilliseconds","ttl","channelsData","channels","channelData","SUB_REFRESH","_getSub","_subRefreshResponse","_subRefreshError","subRefreshTimeout","_subRefresh","isResubscribe","SUBSCRIBE","_subscribeData","startSubscribeBatching","_subscribe","stopSubscribeBatching","recover","_needRecover","_getLastSeq","_getLastGen","_getLastOffset","_getLastEpoch","_subscribeResponse","_subscribeError","_setNew","UNSUBSCRIBE","min","isRecover","wasReconnecting","_resetRetry","getTime","startBatching","stopBatching","_startPing","ctx","latency","_processServerSubs","subCtx","_expandSubscribeContext","recovered","pubs","_handlePublication","_isSubscribing","message","_setSubscribeError","positioned","streamPosition","_setSubscribeSuccess","_recoverable","errorExists","join","info","_isServerSub","leave","unsub","unsubscribe","resubscribe","subscribe","pub","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","_handleUnsub","_handleSub","messages","slice","PING","_pingResponse","isFunction","_nextMessageId","_isConnected","_ping","_flush","authChannels","batch","_setNeedRecover","events","opts","currentSub","_setEvents","_isUnsubscribed","Subscription","EventEmitter","map","c","split","filter","r","methodType","pushType","centrifuge","_centrifuge","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_promises","_promiseId","on","errContext","_resolve","value","_reject","enabled","Object","prototype","toString","call","knownEvents","l","ev","subscribeResult","successContext","_getSubscribeSuccessContext","_getSubscribeErrorContext","noResubscribe","needTrigger","subscribeErrorContext","_setSubscribeSince","_setSubscribeData","_unsubscribe","_isError","res","rej","_nextPromiseId","self","publish","presenceStats","history","step","pow","floor","a","b","key","level","args","console","logger","apply","prefix","lastIndexOf","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","init","once","emitter","errorListener","removeListener","resolver","eventTargetAgnosticAddListener","handler","flags","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","prepend","m","existing","warning","create","newListener","unshift","warned","w","String","count","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","Array","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","defineProperty","enumerable","get","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","keys","rawListeners","eventNames","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","g","globalThis","window"],"sourceRoot":""}